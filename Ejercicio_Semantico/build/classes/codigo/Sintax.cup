

package codigo;
import java_cup.runtime.Symbol;

parser code {:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;}

    public Symbol getS(){
        return this.s;}
:};

terminal  TD_INT, TD_STRING, TD_CHAR, PR_DO, PR_IF, PR_WHILE, PR_RETURN, PUNTOYC, COMA, P_OPEN, P_CLOSE, 
            LLAVES_APER, LLAVES_CIERR, IGUAL, MAYORQ, MENORQ, O_SUMA, O_RESTA, CADENA_CARACT, INT, FLOAT, IDENTIFICADOR;

non terminal INICIO, FUNCIONES, FUNCION, ARGUMENTOS_FUNCION, CONTS, CONT, DECLARACION_VARIABLE, IDENTIFICADORES, ASIGNACION_VARIABLE,
            ASIGNACIONES,
            SENTENCIAS, SENTENCIA_IF, CICLOS, CLICLO_DO_WHILE, RETURN, TIPO_DATO, DATO, CONDICIONAL, OPERADOR_COMP;


start with INICIO;


INICIO ::= FUNCIONES;

FUNCIONES ::= FUNCION | FUNCION FUNCIONES;

FUNCION ::= TIPO_DATO IDENTIFICADOR ARGUMENTOS_FUNCION LLAVES_APER CONTS LLAVES_CIERR;

ARGUMENTOS_FUNCION ::= P_OPEN P_CLOSE;

CONTS ::= CONT | CONT CONTS;

CONT ::= DECLARACION_VARIABLE | SENTENCIAS | CICLOS | RETURN | ASIGNACION_VARIABLE;

/*▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄*/

DECLARACION_VARIABLE ::= TIPO_DATO IDENTIFICADOR IGUAL DATO PUNTOYC | TIPO_DATO IDENTIFICADORES PUNTOYC;

IDENTIFICADORES ::= IDENTIFICADOR | IDENTIFICADOR COMA IDENTIFICADORES;

ASIGNACION_VARIABLE ::= IDENTIFICADOR IGUAL DATO PUNTOYC | IDENTIFICADOR IGUAL ASIGNACIONES PUNTOYC;

ASIGNACIONES ::= IDENTIFICADOR | IDENTIFICADOR O_SUMA  ASIGNACIONES;

/*▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄*/

SENTENCIAS ::= SENTENCIA_IF;

SENTENCIA_IF ::= PR_IF CONDICIONAL LLAVES_APER CONTS LLAVES_CIERR;
/*▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄*/

CICLOS ::= CLICLO_DO_WHILE;

CLICLO_DO_WHILE ::= PR_DO LLAVES_APER CONTS LLAVES_CIERR PR_WHILE CONDICIONAL PUNTOYC;

/*▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄*/

RETURN ::= PR_RETURN DATO PUNTOYC;

/*▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄*/

TIPO_DATO ::= TD_INT | TD_STRING | TD_CHAR;

DATO ::= CADENA_CARACT | INT | FLOAT;

CONDICIONAL ::= P_OPEN IDENTIFICADOR OPERADOR_COMP DATO P_CLOSE;

OPERADOR_COMP ::= IGUAL | MAYORQ | MENORQ;
